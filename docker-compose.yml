services:
  react-app:
    build:
      context: ./fitness-frontend
      dockerfile: Dockerfile.frontend
    ports:
      - "80:80"
    networks:
      - my_fitness_network

  django:
    build:
      context: ./fitness_backend
      dockerfile: Dockerfile.django
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition:  service_healthy
      llama:
        condition: service_started
      mediapipe:
        condition: service_started
    command:  sh -c "python container_manage.py migrate && python container_manage.py runserver 0.0.0.0:8000"
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DJANGO_SETTINGS_MODULE: fitness_backend.container_settings
    volumes:
      - ./fitness_backend:/app
      - media_volume:/app/media
    networks:
      - my_fitness_network
  llama:
    build:
      context: .
      dockerfile: fitness_backend/Dockerfile.llama
    environment:
      MODEL_DOWNLOAD: "False"
      MODEL_REPO: "local"
      MODEL: "tinyllama-1.1b-chat-v0.3.Q8_0.gguf"
      MODEL_ALIAS: "tinyllama-1.1b-chat"
      CHAT_FORMAT: "llama-2" #or whatever chat format you are using
    ports:
      - "8001:8001"
    networks:
      - my_fitness_network
  mediapipe:
    build:
      context: .
      dockerfile: fitness_backend/Dockerfile.mediapipe
    ports:
      - "8002:8002"
    volumes:
      - media_volume:/app/media
    networks:
      - my_fitness_network
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - my_fitness_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  my_fitness_network:
    external: true
    name: fitness_copy_my_fitness_network
volumes:
  postgres_data:
  media_volume: